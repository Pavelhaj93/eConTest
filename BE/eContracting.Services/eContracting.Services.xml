<?xml version="1.0"?>
<doc>
    <assembly>
        <name>eContracting.Services</name>
    </assembly>
    <members>
        <member name="T:eContracting.Services.AuthenticationService">
            <inheritdoc/>
        </member>
        <member name="F:eContracting.Services.AuthenticationService.SettingsReader">
            <summary>
            The settings reader.
            </summary>
        </member>
        <member name="F:eContracting.Services.AuthenticationService.AuthenticationProvider">
            <summary>
            The authentication provider.
            </summary>
        </member>
        <member name="M:eContracting.Services.AuthenticationService.#ctor(eContracting.Services.ISettingsReaderService)">
            <summary>
            Initializes a new instance of the <see cref="T:eContracting.Services.AuthenticationService"/> class.
            </summary>
            <param name="settingsReader">The settings reader.</param>
            <exception cref="T:System.ArgumentNullException">settingsReader</exception>
        </member>
        <member name="M:eContracting.Services.AuthenticationService.GetUniqueKey(eContracting.Models.LoginTypeModel,eContracting.Models.OfferModel)">
            <inheritdoc/>
        </member>
        <member name="M:eContracting.Services.AuthenticationService.GetLoginState(eContracting.Models.OfferModel,System.String,System.String,System.String)">
            <inheritdoc/>
        </member>
        <member name="M:eContracting.Services.AuthenticationService.Login(eContracting.Models.AuthDataModel)">
            <inheritdoc/>
        </member>
        <member name="M:eContracting.Services.AuthenticationService.IsLoggedIn">
            <inheritdoc/>
        </member>
        <member name="M:eContracting.Services.AuthenticationService.GetCurrentUser">
            <inheritdoc/>
        </member>
        <member name="M:eContracting.Services.AuthenticationService.GetMatched(eContracting.Models.OfferModel,System.String)">
            <summary>
            Find <see cref="T:eContracting.Models.LoginTypeModel"/> by <paramref name="offer"/> and <paramref name="key"/>.
            </summary>
            <param name="offer">The offer.</param>
            <param name="key">The key.</param>
            <returns>Login type or null.</returns>
        </member>
        <member name="T:eContracting.Services.CacheApiService">
            <summary>
            Service wrapper over generated <see cref="T:eContracting.Services.ZCCH_CACHE_API"/>.
            </summary>
        </member>
        <member name="M:eContracting.Services.CacheApiService.AcceptOffer(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:eContracting.Services.CacheApiService.AcceptOfferAsync(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:eContracting.Services.CacheApiService.GetOffer(System.String,System.String)">
            <inheritdoc/>
        </member>
        <member name="M:eContracting.Services.CacheApiService.GetOfferAsync(System.String,System.String)">
            <inheritdoc/>
        </member>
        <member name="M:eContracting.Services.CacheApiService.GetXml(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:eContracting.Services.CacheApiService.GetXmlAsync(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:eContracting.Services.CacheApiService.GetAttachments(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:eContracting.Services.CacheApiService.GetAttachmentsAsync(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:eContracting.Services.CacheApiService.ReadOffer(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:eContracting.Services.CacheApiService.ReadOfferAsync(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:eContracting.Services.CacheApiService.SignInOffer(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:eContracting.Services.CacheApiService.SignInOfferAsync(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:eContracting.Services.CacheApiService.GetResponseAsync(System.String,System.String,System.String)">
            <summary>
            Gets data.
            </summary>
            <param name="guid">Guid identifier.</param>
            <param name="type">Type from <see cref="F:eContracting.Services.CacheApiService.AvailableRequestTypes"/> collection.</param>
            <param name="fileType">Type of the file.</param>
            <returns>Instance of <see cref="T:eContracting.Models.ResponseCacheGetModel"/> or an exception.</returns>
        </member>
        <member name="M:eContracting.Services.CacheApiService.SetStatusAsync(System.String,System.String,System.String)">
            <summary>
            Sets the <paramref name="status"/> asynchronously.
            </summary>
            <param name="guid">The unique identifier.</param>
            <param name="type">The type.</param>
            <param name="status">The status.</param>
            <returns></returns>
        </member>
        <member name="M:eContracting.Services.CacheApiService.SetStatusAsync(System.String,System.String,System.Decimal,System.String)">
            <summary>
            Sets the <paramref name="status"/> asynchronously.
            </summary>
            <param name="guid">Guid identifier.</param>
            <param name="type">A type from <see cref="F:eContracting.Services.CacheApiService.AvailableRequestTypes"/> collection.</param>
            <param name="timestamp">Decimal representation of a timestamp.</param>
            <param name="status">Value for <see cref="P:eContracting.Services.ZCCH_CACHE_STATUS_SET.IV_STAT"/>.</param>
            <returns>True if it was successfully set or false.</returns>
        </member>
        <member name="M:eContracting.Services.CacheApiService.GetFilesAsync(System.String,System.Boolean)">
            <summary>
            Gets the files asynchronous.
            </summary>
            <param name="guid">The unique identifier.</param>
            <param name="isAccepted">if set to <c>true</c> [is accepted].</param>
            <returns></returns>
        </member>
        <member name="T:eContracting.Services.IAuthenticationProviderService">
            <summary>
            Represents storage provider which holds information about logged users.
            </summary>
        </member>
        <member name="M:eContracting.Services.IAuthenticationProviderService.Login(eContracting.Models.AuthDataModel)">
            <summary>
            Log-in user with <paramref name="authData"/> containing <see cref="F:eContracting.Models.AuthDataModel.Guid"/>.
            </summary>
            <param name="authData">Auth data model.</param>
        </member>
        <member name="M:eContracting.Services.IAuthenticationProviderService.IsLoggedIn">
            <summary>
            Determines whether user is logged in.
            </summary>
            <returns>
              <c>true</c> if is logged in; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:eContracting.Services.IAuthenticationProviderService.GetData">
            <summary>
            Gets auth date for current (context) user.
            </summary>
            <returns>Data or null.</returns>
        </member>
        <member name="T:eContracting.Services.IAuthenticationService">
            <summary>
            Represents collection of actions for authentication operation.
            </summary>
        </member>
        <member name="M:eContracting.Services.IAuthenticationService.GetLoginState(eContracting.Models.OfferModel,System.String,System.String,System.String)">
            <summary>
            Logins the specified offer.
            </summary>
            <seealso cref="T:eContracting.Models.LoginTypeModel"/>
            <param name="offer">The offer.</param>
            <param name="birthDay">The birth day.</param>
            <param name="key">The key of login type.</param>
            <param name="value">The value by login type.</param>
            <returns></returns>
        </member>
        <member name="M:eContracting.Services.IAuthenticationService.GetUniqueKey(eContracting.Models.LoginTypeModel,eContracting.Models.OfferModel)">
            <summary>
            Gets the key with combination of unique key of <paramref name="loginType"/> and unique key of <paramref name="offer"/>.
            </summary>
            <param name="loginType">Type of the login.</param>
            <param name="offer">The offer.</param>
            <returns></returns>
        </member>
        <member name="M:eContracting.Services.IAuthenticationService.Login(eContracting.Models.AuthDataModel)">
            <summary>
            Log-in user with <paramref name="authData"/>.
            </summary>
            <param name="authData">Authentication data.</param>
        </member>
        <member name="M:eContracting.Services.IAuthenticationService.IsLoggedIn">
            <summary>
            Determines whether user is logged in.
            </summary>
            <returns>
              <c>true</c> if is logged in; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:eContracting.Services.IAuthenticationService.GetCurrentUser">
            <summary>
            Gets the current user.
            </summary>
            <returns>Data or null.</returns>
        </member>
        <member name="T:eContracting.Services.IApiService">
            <summary>
            Service with direct communication to SAP / CACHE.
            </summary>
        </member>
        <member name="M:eContracting.Services.IApiService.AcceptOfferAsync(System.String)">
            <summary>
            Accepts offer asynchronously.
            </summary>
            <param name="guid">Guid identifier.</param>
            <returns>True if it was accepted or false.</returns>
        </member>
        <member name="M:eContracting.Services.IApiService.AcceptOffer(System.String)">
            <summary>
            Accepts offer synchronously.
            </summary>
            <param name="guid">Guid identifier.</param>
            <returns>True if it was accepted or false.</returns>
        </member>
        <member name="M:eContracting.Services.IApiService.ReadOffer(System.String)">
            <summary>
            Reads offer synchronously.
            </summary>
            <param name="guid">Guid identifier.</param>
            <returns>True if it was set or false.</returns>
        </member>
        <member name="M:eContracting.Services.IApiService.ReadOfferAsync(System.String)">
            <summary>
            Reads offer asynchronously.
            </summary>
            <param name="guid">Guid identifier.</param>
            <returns>True if it was set or false.</returns>
        </member>
        <member name="M:eContracting.Services.IApiService.GetAttachmentsAsync(System.String)">
            <summary>
            Gets the files asynchronous.
            </summary>
            <param name="guid">The unique identifier.</param>
            <returns>Files in array or null</returns>
        </member>
        <member name="M:eContracting.Services.IApiService.GetAttachments(System.String)">
            <summary>
            Gets the files synchronous.
            </summary>
            <param name="guid">The unique identifier.</param>
            <returns>Files in array or null</returns>
        </member>
        <member name="M:eContracting.Services.IApiService.GetOffer(System.String,System.String)">
            <summary>
            Gets the offer by <paramref name="guid"/> and <paramref name="type"/> synchronously.
            </summary>
            <param name="guid">Guid identifier.</param>
            <param name="type">Offer type.</param>
            <returns>The offer.</returns>
        </member>
        <member name="M:eContracting.Services.IApiService.GetOfferAsync(System.String,System.String)">
            <summary>
            Gets the offer by <paramref name="guid"/> and <paramref name="type"/> asynchronously.
            </summary>
            <param name="guid">Guid identifier.</param>
            <param name="type">Offer type.</param>
            <returns>The offer.</returns>
        </member>
        <member name="M:eContracting.Services.IApiService.GetXml(System.String)">
            <summary>
            Gets texts for offer <paramref name="guid"/> synchronously.
            </summary>
            <param name="guid">Guid identifier.</param>
            <returns>Array of texts.</returns>
        </member>
        <member name="M:eContracting.Services.IApiService.GetXmlAsync(System.String)">
            <summary>
            Gets texts for offer <paramref name="guid"/> asynchronously.
            </summary>
            <param name="guid">Guid identifier.</param>
            <returns>Array of texts.</returns>
        </member>
        <member name="M:eContracting.Services.IApiService.SignInOffer(System.String)">
            <summary>
            Make offer <paramref name="guid"/> signed.
            </summary>
            <param name="guid">The unique identifier.</param>
            <returns><c>True</c> if response was OK, otherwise <c>false</c>.</returns>
        </member>
        <member name="M:eContracting.Services.IApiService.SignInOfferAsync(System.String)">
            <summary>
            Make offer <paramref name="guid"/> signed asynchronously.
            </summary>
            <param name="guid">The unique identifier.</param>
            <returns><c>True</c> if response was OK, otherwise <c>false</c>.</returns>
        </member>
        <member name="T:eContracting.Services.ILoginReportStore">
            <summary>
            Stores information about login attemps.
            </summary>
        </member>
        <member name="M:eContracting.Services.ILoginReportStore.AddLoginAttempt(System.String,System.String,System.String,System.String,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Adds the login attempt.
            </summary>
            <param name="sessionId">The session identifier.</param>
            <param name="timestamp">The timestamp.</param>
            <param name="guid">The unique identifier.</param>
            <param name="type">The type.</param>
            <param name="birthdayDate">if set to <c>true</c> [birthday date].</param>
            <param name="wrongPostalCode">if set to <c>true</c> [wrong postal code].</param>
            <param name="WrongResidencePostalCode">if set to <c>true</c> [wrong residence postal code].</param>
            <param name="WrongIdentityCardNumber">if set to <c>true</c> [wrong identity card number].</param>
            <param name="generalError">if set to <c>true</c> [general error].</param>
        </member>
        <member name="M:eContracting.Services.ILoginReportStore.AddFailedAttempt(System.String,System.String,System.String)">
            <summary>
            Adds the failed login attempt.
            </summary>
            <param name="guid">The unique identifier.</param>
            <param name="sessionId">The session identifier.</param>
            <param name="browserInfo">The browser information.</param>
        </member>
        <member name="M:eContracting.Services.ILoginReportStore.CanLogin(System.String,System.Int32,System.TimeSpan)">
            <summary>
            Determines whether <paramref name="guid"/> can log-in.
            </summary>
            <param name="guid">The unique identifier.</param>
            <param name="maxFailedAttempts">The maximum failed attempts.</param>
            <param name="delayAfterFailedAttempts">The delay after failed attempts.</param>
            <returns>
              <c>true</c> if this instance can login the specified unique identifier; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:eContracting.Services.ILoginReportStore.CanLogin(System.String)">
            <summary>
            Determines whether <paramref name="guid"/> can log-in.
            </summary>
            <param name="guid">The unique identifier.</param>
        </member>
        <member name="T:eContracting.Services.IOfferAttachmentParserService">
            <summary>
            Represents parser from <see cref="T:eContracting.Services.ZCCH_ST_FILE"/> to <see cref="T:eContracting.Models.OfferAttachmentXmlModel"/> object.
            </summary>
        </member>
        <member name="M:eContracting.Services.IOfferAttachmentParserService.Parse(eContracting.Services.ZCCH_ST_FILE,System.Int32,eContracting.Models.OfferModel)">
            <summary>
            Creates <see cref="T:eContracting.Models.OfferAttachmentXmlModel"/> from given <paramref name="file"/>. <paramref name="offer"/> is needed to define some parameters.
            </summary>
            <param name="file">The file.</param>
            <param name="index">The index position from list of all files.</param>
            <param name="offer">The offer.</param>
            <returns>Instance of <see cref="T:eContracting.Models.OfferAttachmentXmlModel"/>.</returns>
        </member>
        <member name="T:eContracting.Services.IOfferParserService">
            <summary>
            Represents parser from <see cref="T:eContracting.Models.OfferModel"/> to <see cref="T:eContracting.Models.ResponseCacheGetModel"/> object.
            </summary>
        </member>
        <member name="M:eContracting.Services.IOfferParserService.GenerateOffer(eContracting.Models.ResponseCacheGetModel)">
            <summary>
            Generates offer.
            </summary>
            <param name="response">The response.</param>
            <returns>Return <see cref="T:eContracting.Models.OfferModel"/> or null if there are no files in <see cref="T:eContracting.Models.ResponseCacheGetModel"/>.</returns>
        </member>
        <member name="M:eContracting.Services.ISettingsReaderService.GetDefinition(eContracting.Models.OfferModel)">
            <summary>
            Gets definition by <see cref="P:eContracting.Models.OfferModel.Process"/> and <see cref="P:eContracting.Models.OfferModel.ProcessType"/> from '/sitecore/content/eContracting2/Definitions'.
            </summary>
            <param name="offer">The offer.</param>
            <returns>Definition or <see cref="T:System.ApplicationException"/> when not found.</returns>
        </member>
        <member name="M:eContracting.Services.ISettingsReaderService.GetLoginTypes(eContracting.Models.OfferModel)">
            <summary>
            Gets available login types for <paramref name="offer"/> defined in <see cref="T:eContracting.Models.DefinitionCombinationModel"/>.
            </summary>
            <param name="offer">The offer.</param>
            <returns>List of defined login types or if there is not defined any, one random login type from all of them.</returns>
        </member>
        <member name="M:eContracting.Services.ISettingsReaderService.GetAllProcesses">
            <summary>
            Gets all processes from '/sitecore/content/eContracting2/Settings/Processes'.
            </summary>
            <returns>List of all defined processes.</returns>
        </member>
        <member name="M:eContracting.Services.ISettingsReaderService.GetAllProcessTypes">
            <summary>
            Gets all process types from '/sitecore/content/eContracting2/Settings/ProcessTypes'.
            </summary>
            <returns>List of all defined process types.</returns>
        </member>
        <member name="M:eContracting.Services.ISettingsReaderService.GetAllLoginTypes">
            <summary>
            Gets all login types from '/sitecore/content/eContracting2/Settings/LoginTypes'.
            </summary>
            <returns>List of all defined login types.</returns>
        </member>
        <member name="M:eContracting.Services.ISettingsReaderService.GetApiServiceOptions">
            <summary>
            Gets configuration for <see cref="T:eContracting.Services.IApiService"/>.
            </summary>
            <returns>The configuration.</returns>
        </member>
        <member name="F:eContracting.Services.MongoLoginReportStore.MongoClient">
            <summary>
            The client
            </summary>
        </member>
        <member name="F:eContracting.Services.MongoLoginReportStore.MongoDatabase">
            <summary>
            The database of the collections.
            </summary>
        </member>
        <member name="F:eContracting.Services.MongoLoginReportStore.LoginsLogCollection">
            <summary>
            Collection of all login attempts.
            </summary>
        </member>
        <member name="F:eContracting.Services.MongoLoginReportStore.FailedLoginsCollection">
            <summary>
            Collection of failed login attempts.
            </summary>
        </member>
        <member name="M:eContracting.Services.MongoLoginReportStore.#ctor(eContracting.ILogger,eContracting.Services.ISettingsReaderService)">
            <summary>
            Initializes a new instance of the <see cref="T:eContracting.Services.MongoLoginReportStore"/> class.
            </summary>
        </member>
        <member name="M:eContracting.Services.MongoLoginReportStore.AddLoginAttempt(System.String,System.String,System.String,System.String,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:eContracting.Services.MongoLoginReportStore.CanLogin(System.String,System.Int32,System.TimeSpan)">
            <inheritdoc/>
        </member>
        <member name="M:eContracting.Services.MongoLoginReportStore.AddFailedAttempt(System.String,System.String,System.String)">
            <inheritdoc/>
        </member>
        <member name="M:eContracting.Services.MongoLoginReportStore.NormalizeGuid(System.String)">
            <summary>
            Normalizes the unique identifier.
            </summary>
            <param name="guid">The unique identifier.</param>
            <returns>Upper case value of <paramref name="guid"/></returns>
        </member>
        <member name="T:eContracting.Services.OfferAttachmentParserService">
            <inheritdoc/>
            <seealso cref="T:eContracting.Services.IOfferAttachmentParserService" />
        </member>
        <member name="M:eContracting.Services.OfferAttachmentParserService.Parse(eContracting.Services.ZCCH_ST_FILE,System.Int32,eContracting.Models.OfferModel)">
            <inheritdoc/>
        </member>
        <member name="M:eContracting.Services.OfferAttachmentParserService.GetFileName(eContracting.Services.ZCCH_ST_FILE)">
            <summary>
            Gets readable file name.
            </summary>
            <param name="file">The file.</param>
            <returns>File name to display.</returns>
        </member>
        <member name="T:eContracting.Services.OfferParserService">
            <inheritdoc/>
        </member>
        <member name="M:eContracting.Services.OfferParserService.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:eContracting.Services.OfferParserService"/> class.
            </summary>
        </member>
        <member name="M:eContracting.Services.OfferParserService.GenerateOffer(eContracting.Models.ResponseCacheGetModel)">
            <inheritdoc/>
        </member>
        <member name="T:eContracting.Services.SessionAuthenticationProviderService">
            <summary>
            Session provider for logged user.
            </summary>
            <seealso cref="T:eContracting.Services.IAuthenticationProviderService" />
        </member>
        <member name="M:eContracting.Services.SessionAuthenticationProviderService.GetData">
            <inheritdoc/>
        </member>
        <member name="M:eContracting.Services.SessionAuthenticationProviderService.IsLoggedIn">
            <inheritdoc/>
        </member>
        <member name="M:eContracting.Services.SessionAuthenticationProviderService.Login(eContracting.Models.AuthDataModel)">
            <inheritdoc/>
        </member>
        <member name="M:eContracting.Services.SitecoreSettingsReaderService.#ctor(Glass.Mapper.Sc.ISitecoreContext)">
            <summary>
            Initializes a new instance of the <see cref="T:eContracting.Services.SitecoreSettingsReaderService"/> class.
            </summary>
        </member>
        <member name="M:eContracting.Services.SitecoreSettingsReaderService.GetAllLoginTypes">
            <inheritdoc/>
        </member>
        <member name="M:eContracting.Services.SitecoreSettingsReaderService.GetAllProcesses">
            <inheritdoc/>
        </member>
        <member name="M:eContracting.Services.SitecoreSettingsReaderService.GetAllProcessTypes">
            <inheritdoc/>
        </member>
        <member name="M:eContracting.Services.SitecoreSettingsReaderService.GetApiServiceOptions">
            <inheritdoc/>
        </member>
        <member name="M:eContracting.Services.SitecoreSettingsReaderService.GetDefinition(eContracting.Models.OfferModel)">
            <inheritdoc/>
        </member>
        <member name="M:eContracting.Services.SitecoreSettingsReaderService.GetLoginTypes(eContracting.Models.OfferModel)">
            <inheritdoc/>
        </member>
        <member name="M:eContracting.Services.SitecoreSettingsReaderService.GetMainTextForLogin(eContracting.Models.OfferModel)">
            <inheritdoc/>
        </member>
        <member name="T:eContracting.Services.ZCCH_CACHE_API_Extensions">
            <summary>
            Extensions for <see cref="T:eContracting.Services.ZCCH_CACHE_API"/>.
            </summary>
        </member>
        <member name="M:eContracting.Services.ZCCH_CACHE_API_Extensions.ThereAreFiles(eContracting.Services.ZCCH_CACHE_GETResponse)">
            <summary>
            Checks if the response contains files.
            </summary>
            <param name="res">Response from SAP.</param>
            <returns>Retruns tru if response contains files.</returns>
        </member>
    </members>
</doc>
