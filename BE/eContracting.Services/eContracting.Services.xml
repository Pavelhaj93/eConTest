<?xml version="1.0"?>
<doc>
    <assembly>
        <name>eContracting.Services</name>
    </assembly>
    <members>
        <member name="M:eContracting.Services.CallMeBackService.GetCsrfTokenAsAnonymous(eContracting.Models.CallMeBackModel)">
            <summary>
            Gets CSRF token for non Congnito logged in user.
            </summary>
            <remarks>
                <para>Calling endpoint - <see cref="P:eContracting.ISettingsReaderService.CrmAnonymousUrl"/></para>
                <para>Using username - <see cref="P:eContracting.ISettingsReaderService.CrmAnonymousUser"/></para>
                <para>Using password - <see cref="P:eContracting.ISettingsReaderService.CrmAnonymousPassword"/></para>
            </remarks>
            <param name="model">Call me back data model.</param>
            <returns>CSRF token | received cookies</returns>
        </member>
        <member name="M:eContracting.Services.CallMeBackService.GetCsrfTokenAsCognito(eContracting.Models.CallMeBackModel,eContracting.Models.UserCacheDataModel)">
            <summary>
            Gets CSRF token for Cognito logged in user.
            </summary>
            <remarks>
                <para>Calling endpoint - <see cref="P:eContracting.ISettingsReaderService.CrmCognitoUrl"/></para>
                <para>Using API ID - <see cref="P:eContracting.ISettingsReaderService.SapApiGatewayId"/></para>
                <para>Using Bearer authorization with <see cref="P:eContracting.Models.OAuthTokensModel.AccessToken"/></para>
            </remarks>
            <param name="model">Call me back data model.</param>
            <param name="userData">The user data.</param>
            <returns>CSRF token | received cookies</returns>
        </member>
        <member name="T:eContracting.Services.LocalFakeSignService">
            <summary>
            Local / offline sign service to simulate signature.
            </summary>
            <example>
            Patch file:
            <code>
              <configuration xmlns:patch="http://www.sitecore.net/xmlconfig/">
                <sitecore>
                  <services>
                    <register serviceType="eContracting.ISignService, eContracting.Core">
                      <patch:attribute name="implementationType">eContracting.Services.LocalFakeSignService, eContracting.Services</patch:attribute>
                    </register>
                  </services>
                </sitecore>
              </configuration>
            </code>
            </example>
        </member>
        <member name="T:eContracting.Services.LocalOfferDataService">
            <summary>
              <para>Local / offline provider for offers. It only reads data, it's not updating them.</para>
              <para>How to run it:</para>
              <para>Create local folder <c>[site root]\App_Data\eContracting\ZCCH_CACHE_API</c> and copy there folders from [git root]/docs/Examples/Versions/1|2|3.</para>
              <para>Create patch file in your running site to use this service (is must be loaded as last!) - see examples. NEVER commit this file to repository!</para>
              <para>If you want to download new offer, run project <c>eContracting.ConsoleClient</c>, write <c>download</c>, enter and put there a guid. If will download it to <c>[git root]/docs/Examples/Versions/1|2|3</c>.</para>
            </summary>
            <remarks>
              <para>If an offer is expired, you need to overwrite valid date. Go to <c>ZCCH_ST_ATTRIB.xml</c>, find attribute <c>VALID_TO</c> and overwrite <c>ATTRVAL</c> to future date.</para>
              <para>If an offer is accepted, you can invalidate it. Go to <c>ZCCH_ST_ATTRIB.xml</c>, find <c>ATTRID</c> with <c>ACCEPTED_AT</c> and delete parent element <c>ZCCH_ST_ATTRIB</c> from the file.</para>
            </remarks>
            <example>
            Patch file:
            <code>
              <configuration xmlns:patch="http://www.sitecore.net/xmlconfig/">
                <sitecore>
                  <services>
                    <register serviceType="eContracting.IOfferDataService, eContracting.Core">
                      <patch:attribute name="implementationType">eContracting.Services.LocalOfferDataService, eContracting.Services</patch:attribute>
                    </register>
                  </services>
                </sitecore>
              </configuration>
            </code>
            Change valid date for expired offer in <c>ZCCH_ST_ATTRIB.xml</c>:
            <code>
              <ZCCH_ST_ATTRIB>
                <ATTRID>VALID_TO</ATTRID>
                <ATTRINDX>000</ATTRINDX>
                <ATTRVAL>20300101</ATTRVAL>
              </ZCCH_ST_ATTRIB>
            </code>
            RemoveAuth accepted date in <c>ZCCH_ST_ATTRIB.xml</c> - delete element <c>ZCCH_ST_ATTRIB</c> where <c>ATTRID</c> has value <c>ACCEPTED_AT</c>.
            <code>
              <ZCCH_ST_ATTRIB>
                <ATTRID>ACCEPTED_AT</ATTRID>
                <ATTRINDX>000</ATTRINDX>
                <ATTRVAL>20220816125421</ATTRVAL>
              </ZCCH_ST_ATTRIB>
            </code>
            </example>
        </member>
        <member name="F:eContracting.Services.OfferDataSapService.Logger">
            <summary>
            The logger.
            </summary>
        </member>
        <member name="F:eContracting.Services.OfferDataSapService.SettingsReaderService">
            <summary>
            The settings reader service.
            </summary>
        </member>
        <member name="F:eContracting.Services.OfferDataSapService.ServiceFactory">
            <summary>
            The API service factory.
            </summary>
        </member>
        <member name="M:eContracting.Services.OfferDataSapService.GetResponse(System.String,eContracting.OFFER_TYPES,System.String)">
            <summary>
            Gets data.
            </summary>
            <param name="guid">Guid identifier.</param>
            <param name="type">Type from <see cref="T:eContracting.OFFER_TYPES"/> collection.</param>
            <param name="fileType">Type of the file.</param>
            <returns>Instance of <see cref="T:eContracting.Models.ResponseCacheGetModel"/> or an exception.</returns>
        </member>
        <member name="M:eContracting.Services.OfferDataSapService.Put(System.String,eContracting.Services.ZCCH_ST_ATTRIB[],eContracting.Models.OfferFileXmlModel[])">
            <summary>
            Inserts data with 'NABIDKA_PRIJ'.
            </summary>
            <param name="guid">The unique identifier.</param>
            <param name="attributes">The attributes.</param>
            <param name="files">The files.</param>
            <returns>The response.</returns>
        </member>
        <member name="M:eContracting.Services.OfferDataSapService.SetStatus(System.String,eContracting.OFFER_TYPES,System.Decimal,System.String)">
            <summary>
            Sets the <paramref name="status"/> asynchronously.
            </summary>
            <param name="guid">Guid identifier.</param>
            <param name="type">A type from <see cref="T:eContracting.OFFER_TYPES"/> collection.</param>
            <param name="timestamp">Decimal representation of a timestamp.</param>
            <param name="status">Value for <see cref="P:eContracting.Services.ZCCH_CACHE_STATUS_SET.IV_STAT"/>.</param>
            <returns>Response from inner service.</returns>
        </member>
        <member name="M:eContracting.Services.OfferDataSapService.UserAccessCheck(System.String,System.String,eContracting.OFFER_TYPES)">
            <summary>
            Calling <see cref="T:eContracting.Services.ZCCH_CACHE_ACCESS_CHECK"/> to check if Cognito user has access to offer with <paramref name="guid"/>.
            </summary>
            <param name="user">User data with <see cref="!:UserCacheDataModel.Guid"/>.</param>
            <param name="type">A type from <see cref="T:eContracting.OFFER_TYPES"/> collection.</param>
            <returns><see cref="T:eContracting.Models.ResponseAccessCheckModel"/> model when request was successful. If user is not Cognito, returns <c>null</c>.</returns>
            <exception cref="T:eContracting.EcontractingDataException">When call to <see cref="T:eContracting.Services.ZCCH_CACHE_ACCESS_CHECKRequest"/> failed.</exception>
        </member>
        <member name="T:eContracting.Services.Resource">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:eContracting.Services.Resource.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:eContracting.Services.Resource.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="M:eContracting.Services.UserService.SaveUser(System.String,eContracting.Models.UserCacheDataModel)">
            <inheritdoc/>
        </member>
        <member name="M:eContracting.Services.UserService.CanAuthenticate(System.String)">
            <inheritdoc/>
            <remarks>Only checks cookies for Cognito user.</remarks>
        </member>
        <member name="M:eContracting.Services.UserService.Authenticate(System.String,eContracting.Models.UserCacheDataModel)">
            <inheritdoc/>
        </member>
        <member name="M:eContracting.Services.UserService.TryUpdateUserFromContext(System.String,eContracting.Models.UserCacheDataModel)">
            <inheritdoc/>
        </member>
        <member name="M:eContracting.Services.UserService.Logout(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:eContracting.Services.UserService.Logout(System.String,eContracting.Models.UserCacheDataModel,eContracting.AUTH_METHODS)">
            <inheritdoc/>
        </member>
        <member name="M:eContracting.Services.UserService.Abandon(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:eContracting.Services.UserService.GetUser">
            <inheritdoc/>
        </member>
        <member name="M:eContracting.Services.UserService.IsAuthorized">
            <inheritdoc/>
        </member>
        <member name="M:eContracting.Services.UserService.IsAuthorizedFor(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:eContracting.Services.UserService.IsAuthorized(eContracting.Models.UserCacheDataModel,System.String)">
            <inheritdoc/>
        </member>
        <member name="M:eContracting.Services.UserService.IsUserValid(System.String,eContracting.Models.UserCacheDataModel)">
            <inheritdoc/>
        </member>
        <member name="M:eContracting.Services.UserService.RefreshAuthorizationIfNeeded(System.String,eContracting.Models.UserCacheDataModel)">
            <inheritdoc/>
        </member>
        <member name="M:eContracting.Services.UserService.GetRefreshTokens(eContracting.Models.OAuthTokensModel)">
            <summary>
            Gets new refresh token only when validity of current <paramref name="tokens"/> is less than <see cref="P:eContracting.ISettingsReaderService.CognitoMinSecondsToRefreshToken"/>.
            </summary>
            <param name="tokens">The actual tokens.</param>
        </member>
        <member name="T:eContracting.Services.GeneralRestApiService">
            <summary>
            Represents REST API client to use only one instance of <see cref="T:System.Net.Http.HttpClient"/>.
            </summary>
        </member>
        <member name="T:eContracting.Services.TwoSecrectsAuthService">
            <inheritdoc/>
        </member>
        <member name="F:eContracting.Services.TwoSecrectsAuthService.SettingsReader">
            <summary>
            The settings reader.
            </summary>
        </member>
        <member name="F:eContracting.Services.TwoSecrectsAuthService.Cache">
            <summary>
            The cache.
            </summary>
        </member>
        <member name="M:eContracting.Services.TwoSecrectsAuthService.#ctor(eContracting.ISettingsReaderService,eContracting.IDataSessionCacheService)">
            <summary>
            Initializes a new instance of the <see cref="T:eContracting.Services.TwoSecrectsAuthService"/> class.
            </summary>
            <param name="settingsReader">The settings reader.</param>
            <param name="cacheService">The cache service.</param>
            <exception cref="T:System.ArgumentNullException">
            settingsReader
            or
            cacheService
            </exception>
        </member>
        <member name="M:eContracting.Services.TwoSecrectsAuthService.Authenticate(eContracting.Models.UserCacheDataModel)">
            <inheritdoc/>
        </member>
        <member name="M:eContracting.Services.TwoSecrectsAuthService.IsAuthenticated(System.Web.HttpRequestBase)">
            <inheritdoc/>
        </member>
        <member name="M:eContracting.Services.TwoSecrectsAuthService.IsAuthenticated(System.Web.Http.Controllers.HttpRequestContext)">
            <inheritdoc/>
        </member>
        <member name="M:eContracting.Services.TwoSecrectsAuthService.GetCurrentUser">
            <inheritdoc/>
        </member>
        <member name="T:eContracting.Services.CognitoAuthService">
            <summary>
            AWS Cognito service.
            </summary>
            <seealso cref="!:https://docs.aws.amazon.com/cognito/latest/developerguide/token-endpoint.html"/>
        </member>
        <member name="M:eContracting.Services.CognitoAuthService.GetSettings">
            <inheritdoc/>
        </member>
        <member name="M:eContracting.Services.CognitoAuthService.GetTokens(System.Web.HttpCookieCollection)">
            <inheritdoc/>
        </member>
        <member name="M:eContracting.Services.CognitoAuthService.GetUser(System.Web.HttpCookieCollection)">
            <inheritdoc/>
        </member>
        <member name="M:eContracting.Services.CognitoAuthService.GetVerifiedUser(eContracting.Models.OAuthTokensModel)">
            <inheritdoc/>
        </member>
        <member name="M:eContracting.Services.CognitoAuthService.GetRefreshedTokens(eContracting.Models.OAuthTokensModel)">
            <inheritdoc/>
        </member>
        <member name="F:eContracting.Services.DbContextStartup.Logger">
            <summary>
            The logger.
            </summary>
        </member>
        <member name="M:eContracting.Services.DbContextStartup.Initialize">
            <inheritdoc/>
        </member>
        <member name="T:eContracting.Services.DbEventLogger">
            <summary>
            Database storage for log events.
            </summary>
            <seealso cref="T:eContracting.IEventLogger" />
        </member>
        <member name="F:eContracting.Services.DbEventLogger.ConnectionString">
            <summary>
            The connection string.
            </summary>
        </member>
        <member name="F:eContracting.Services.DbEventLogger.Logger">
            <summary>
            The logger.
            </summary>
        </member>
        <member name="M:eContracting.Services.DbEventLogger.#ctor(eContracting.ISettingsReaderService,eContracting.ILogger)">
            <summary>
            Initializes a new instance of the <see cref="T:eContracting.Services.DbEventLogger"/> class.
            </summary>
            <param name="settingsReader">The settings reader.</param>
            <param name="logger">The logger.</param>
        </member>
        <member name="M:eContracting.Services.DbEventLogger.Add(System.String,System.String,eContracting.EVENT_NAMES)">
            <inheritdoc/>
        </member>
        <member name="M:eContracting.Services.DbEventLogger.Add(System.String,System.String,eContracting.EVENT_NAMES,System.String)">
            <inheritdoc/>
        </member>
        <member name="M:eContracting.Services.DbEventLogger.Add(eContracting.Models.EventLogModel)">
            <inheritdoc/>
        </member>
        <member name="T:eContracting.Services.DbLoginFailedAttemptBlockerStore">
            <inheritdoc/>
            <seealso cref="T:eContracting.ILoginFailedAttemptBlockerStore" />
        </member>
        <member name="F:eContracting.Services.DbLoginFailedAttemptBlockerStore.ConnectionString">
            <summary>
            The connection string.
            </summary>
        </member>
        <member name="F:eContracting.Services.DbLoginFailedAttemptBlockerStore.Logger">
            <summary>
            The logger.
            </summary>
        </member>
        <member name="F:eContracting.Services.DbLoginFailedAttemptBlockerStore.SettingsReaderService">
            <summary>
            SettingsReader, needed for database connection string
            </summary>
        </member>
        <member name="M:eContracting.Services.DbLoginFailedAttemptBlockerStore.#ctor(eContracting.ILogger,eContracting.ISettingsReaderService)">
            <summary>
                    Initializes a new instance of the <see cref="T:eContracting.Services.DbLoginFailedAttemptBlockerStore"/> class.
            </summary>
            <param name="logger">Logger</param>
            <param name="settingsReaderService">SettingsReader</param>
        </member>
        <member name="M:eContracting.Services.DbLoginFailedAttemptBlockerStore.Add(eContracting.Models.LoginFailureModel)">
            <inheritdoc/>
        </member>
        <member name="M:eContracting.Services.DbLoginFailedAttemptBlockerStore.IsAllowed(System.String,System.Int32,System.TimeSpan)">
            <inheritdoc/>
        </member>
        <member name="M:eContracting.Services.DbLoginFailedAttemptBlockerStore.Clear(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:eContracting.Services.DbLoginFailedAttemptBlockerStore.DeleteAllOlderThan(System.DateTime,System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="T:eContracting.Services.FileOptimizer">
            <inheritdoc/>
            <seealso cref="T:eContracting.IFileOptimizer" />
        </member>
        <member name="M:eContracting.Services.FileOptimizer.#ctor(eContracting.ILogger,Glass.Mapper.Sc.ISitecoreContext,eContracting.IOfferService,eContracting.IUserService,eContracting.ISettingsReaderService)">
            <summary>
            Initializes a new instance of the <see cref="T:eContracting.Services.FileOptimizer"/> class.
            </summary>
            <param name="logger">The logger.</param>
            <param name="context">The context.</param>
            <param name="apiService">The API service.</param>
            <param name="authService">The authentication service.</param>
            <param name="settingsReaderService">The settings reader service.</param>
            <exception cref="T:System.ArgumentNullException">
            logger
            or
            context
            or
            apiService
            or
            authService
            or
            settingsReaderService
            </exception>
        </member>
        <member name="M:eContracting.Services.FileOptimizer.AddAsync(eContracting.Models.DbUploadGroupFileModel,System.String,System.String,System.String,System.Byte[],System.String,System.String)">
            <inheritdoc/>
        </member>
        <member name="M:eContracting.Services.FileOptimizer.EnforceOfferTotalFilesSizeAsync(System.Collections.Generic.List{eContracting.Models.DbUploadGroupFileModel},eContracting.Models.DbUploadGroupFileModel,System.String)">
            <inheritdoc/>
        </member>
        <member name="M:eContracting.Services.FileOptimizer.RemoveFileAsync(eContracting.Models.DbUploadGroupFileModel,System.String)">
            <inheritdoc/>
        </member>
        <member name="M:eContracting.Services.FileOptimizer.NormalizeOrientation(System.Drawing.Image)">
            <summary>
            Otoci obrazek podle Exif tagu, pokud tam je
            </summary>
            <param name="image"></param>
            <returns>True, pokud Image nejak otocil. Jinak false.</returns>
        </member>
        <member name="M:eContracting.Services.FileOptimizer.ResizeImage(System.Drawing.Image,System.Int32,System.Int32,System.Nullable{System.Single},System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <summary>
            Zmensi bitmap obrazek
            </summary>
            <param name="image"></param>
            <param name="minWidth"></param>
            <param name="minHeight"></param>
            <param name="ratio">Desetinne cislo, jak moc se ma obrazek zmensit</param>
            <param name="maxWidth"></param>
            <param name="maxHeight"></param>
            <returns></returns>
        </member>
        <member name="M:eContracting.Services.FileOptimizer.ResizeImage(System.Drawing.Image,System.Drawing.Size)">
            <summary>
            Zmensi bitmap obrazek
            </summary>
            <param name="mg"></param>
            <param name="newSize"></param>        
        </member>
        <member name="M:eContracting.Services.FileOptimizer.AppendPdfToPdf(System.Byte[],PdfSharp.Pdf.PdfDocument)">
            <summary>
            Vlozi pdf do pdf dokumentu
            </summary>
            <param name="pdf"></param>
            <param name="outputDocument"></param>
        </member>
        <member name="M:eContracting.Services.FileOptimizer.CreateBitmap(System.Byte[])">
            <summary>
            Vytvori bitmap obrazek z bytoveho pole
            </summary>
            <param name="imgBytes"></param>
        </member>
        <member name="F:eContracting.Services.FileSignService.Logger">
            <summary>
            The logger.
            </summary>
        </member>
        <member name="F:eContracting.Services.FileSignService.SettingsReaderService">
            <summary>
            The settings service.
            </summary>
        </member>
        <member name="F:eContracting.Services.FileSignService.ServiceFactory">
            <summary>
            The service factory.
            </summary>
        </member>
        <member name="M:eContracting.Services.FileSignService.#ctor(eContracting.ILogger,eContracting.ISettingsReaderService,eContracting.IServiceFactory)">
            <summary>
            Initializes a new instance of the <see cref="T:eContracting.Services.FileSignService"/> class.
            </summary>
            <param name="logger">The logger.</param>
            <param name="settingsReaderService">The settings reader service.</param>
            <param name="factory">The factory.</param>
        </member>
        <member name="M:eContracting.Services.FileSignService.Sign(eContracting.Models.OfferModel,eContracting.Models.OfferAttachmentModel,System.Byte[])">
            <inheritdoc/>
        </member>
        <member name="M:eContracting.Services.OfferJsonDescriptor.#ctor(eContracting.ILogger,eContracting.ITextService,Glass.Mapper.Sc.ISitecoreService,eContracting.IOfferService,eContracting.ISettingsReaderService)">
            <summary>
            Initializes a new instance of the <see cref="T:eContracting.Services.OfferJsonDescriptor"/> class.
            </summary>
            <param name="logger">The logger.</param>
            <param name="textService">The text service.</param>
            <param name="sitecoreService">The context.</param>
            <param name="apiService">The API service.</param>
            <param name="settingsReaderService">The settings reader service.</param>
            <exception cref="T:System.ArgumentNullException">
            logger
            or
            textService
            or
            context
            or
            apiService
            or
            settingsReaderService
            </exception>
        </member>
        <member name="M:eContracting.Services.OfferJsonDescriptor.GetSummary(eContracting.Models.OfferModel,eContracting.Models.UserCacheDataModel)">
            <inheritdoc/>
        </member>
        <member name="M:eContracting.Services.OfferJsonDescriptor.GetSummary(eContracting.Models.OffersContainerModel,eContracting.Models.UserCacheDataModel)">
            <inheritdoc/>
        </member>
        <member name="M:eContracting.Services.OfferJsonDescriptor.GetNew(eContracting.Models.OfferModel,eContracting.Models.UserCacheDataModel)">
            <inheritdoc/>
        </member>
        <member name="M:eContracting.Services.OfferJsonDescriptor.GetNew(eContracting.Models.OffersContainerModel,eContracting.Models.UserCacheDataModel)">
            <inheritdoc/>
        </member>
        <member name="M:eContracting.Services.OfferJsonDescriptor.GetAccepted(eContracting.Models.OfferModel,eContracting.Models.UserCacheDataModel)">
            <inheritdoc/>
        </member>
        <member name="M:eContracting.Services.OfferJsonDescriptor.GetAccepted(eContracting.Models.OffersContainerModel,eContracting.Models.UserCacheDataModel)">
            <inheritdoc/>
        </member>
        <member name="M:eContracting.Services.OfferJsonDescriptor.GetPersonalData(eContracting.Models.OfferModel)">
            <summary>
            Gets personal data.
            </summary>
            <param name="offer"></param>
            <returns></returns>
        </member>
        <member name="M:eContracting.Services.OfferJsonDescriptor.GetProductData(eContracting.Models.OfferModel)">
            <summary>
            Gets product data with all prices.
            </summary>
            <param name="offer"></param>
            <returns>Null when <see cref="P:eContracting.Models.OfferModel.ShowPrices"/> == false OR there are no data to display. Otherwise data object.</returns>
        </member>
        <member name="M:eContracting.Services.OfferJsonDescriptor.GetDistributorChange(eContracting.Models.OfferModel)">
            <summary>
            Gets data when user / offer changes a distributor (dismissal previous dealer).
            </summary>
            <param name="offer"></param>
            <returns>Null when text parameter <c>PERSON_COMPETITOR_NAME</c> is missing OR <see cref="P:eContracting.Models.OfferModel.Process"/> not equals to <c>01</c>. Otherwise data object.</returns>
        </member>
        <member name="M:eContracting.Services.OfferJsonDescriptor.GetAccepted(eContracting.Models.OfferModel,eContracting.Models.OfferAttachmentModel[])">
            <summary>
            Gets data for accepted offer.
            </summary>
            <param name="offer"></param>
            <param name="attachments"></param>
            <returns>Always returns the object.</returns>
        </member>
        <member name="M:eContracting.Services.OfferJsonDescriptor.GetNew(eContracting.Models.OfferModel,eContracting.Models.OfferAttachmentModel[])">
            <summary>
            Gets data for new non-accepted offer.
            </summary>
            <param name="offer"></param>
            <param name="attachments"></param>
            <returns>Always returns the object.</returns>
        </member>
        <member name="M:eContracting.Services.OfferJsonDescriptor.GetAllSalesArguments(System.Collections.Generic.IDictionary{System.String,System.String},System.Boolean)">
            <summary>
            Gets all sales arguments.
            </summary>
            <param name="textParameters">Text parameters.</param>
            <returns>All sales arguments or empty array.</returns>
        </member>
        <member name="M:eContracting.Services.OfferJsonDescriptor.GetCommoditySalesArguments(System.Collections.Generic.IDictionary{System.String,System.String},eContracting.Models.IDefinitionCombinationModel)">
            <summary>
            Gets sales arguments from <c>_SALES_ARGUMENTS_</c> text parameters.
            </summary>
            <param name="textParameters">Text parameters.</param>
            <param name="definition">The matrix definition.</param>
            <returns>All sales arguments or null.</returns>
        </member>
        <member name="M:eContracting.Services.OfferJsonDescriptor.GetGifts(System.Collections.Generic.IDictionary{System.String,System.String},eContracting.Models.IDefinitionCombinationModel)">
            <summary>
            Gets gifts from <c>BENEFITS</c> parameters.
            </summary>
            <param name="textParameters">Text parameters.</param>
            <param name="definition">The matrix combination.</param>
            <returns>Gets group of gifts or null if not <c>BENEFITS</c> found.</returns>
        </member>
        <member name="M:eContracting.Services.OfferJsonDescriptor.GetProductType(eContracting.Models.OfferModel)">
            <summary>
            Gets <c>G</c> for gas, <c>E</c> for electricity.
            </summary>
            <param name="offer"></param>
            <returns></returns>
        </member>
        <member name="M:eContracting.Services.OfferJsonDescriptor.IsSectionChecked(System.Collections.Generic.IDictionary{System.String,System.String},System.String)">
            <summary>
            Determines whether section <paramref name="key"/> has value 'X' (&lt;SECTION&gt;X&lt;/SECTION&gt;)
            </summary>
            <param name="textParameters">The text parameters.</param>
            <param name="key">The key.</param>
        </member>
        <member name="M:eContracting.Services.OfferJsonDescriptor.UpdateProductInfo(System.Collections.Generic.IEnumerable{eContracting.Models.JsonAcceptFileModel},eContracting.Models.IProductInfoModel[])">
            <summary>
            Go through <paramref name="files"/> and finding match with <paramref name="productInfos"/>.
            If match found, a <see cref="T:eContracting.Models.JsonAcceptFileModel"/> is enriched with <see cref="T:eContracting.Models.IProductInfoModel"/> data.
            </summary>
            <param name="files">Collection of files in one group.</param>
            <param name="productInfos">Collection of all product information.</param>
        </member>
        <member name="M:eContracting.Services.OfferJsonDescriptor.GetMatchedProductInfo(eContracting.Models.JsonAcceptFileModel,eContracting.Models.IProductInfoModel[])">
            <summary>
            Finds match in <paramref name="file"/> attributes and <paramref name="productInfos"/>.
            </summary>
            <param name="file">A file to find match with <see cref="T:eContracting.Models.IProductInfoModel"/>.</param>
            <param name="productInfos">Collection of all product information.</param>
            <returns>If match found, returns <see cref="T:eContracting.Models.IProductInfoModel"/>, otherwise null.</returns>
        </member>
        <member name="T:eContracting.Services.OfferService">
            <summary>
            Service wrapper over generated <see cref="T:eContracting.Services.ZCCH_CACHE_API"/>.
            </summary>
        </member>
        <member name="F:eContracting.Services.OfferService.Logger">
            <summary>
            The logger.
            </summary>
        </member>
        <member name="F:eContracting.Services.OfferService.UserFileCache">
            <summary>
            The user file cache.
            </summary>
        </member>
        <member name="F:eContracting.Services.OfferService.SettingsReaderService">
            <summary>
            The settings reader service.
            </summary>
        </member>
        <member name="F:eContracting.Services.OfferService.ServiceFactory">
            <summary>
            The API service factory.
            </summary>
        </member>
        <member name="F:eContracting.Services.OfferService.OfferParser">
            <summary>
            The offer parser.
            </summary>
        </member>
        <member name="F:eContracting.Services.OfferService.AttachmentParser">
            <summary>
            The attachment parser.
            </summary>
        </member>
        <member name="F:eContracting.Services.OfferService.Context">
            <summary>
            The context wrapper.
            </summary>
        </member>
        <member name="M:eContracting.Services.OfferService.#ctor(eContracting.ILogger,eContracting.IUserFileCacheService,eContracting.ISettingsReaderService,eContracting.IServiceFactory,eContracting.IOfferDataService,eContracting.IOfferParserService,eContracting.IOfferAttachmentParserService,eContracting.IDataRequestCacheService,eContracting.IContextWrapper)">
            <summary>
            Initializes a new instance of the <see cref="T:eContracting.Services.OfferService"/> class.
            </summary>
            <param name="logger">The logger.</param>
            <param name="userService">The user data service.</param>
            <param name="userFileCache">The user file cache.</param>
            <param name="settingsReaderService">The settings reader service.</param>
            <param name="factory">The factory for <see cref="T:eContracting.Services.ZCCH_CACHE_API"/>.</param>
            <param name="offerParser">The offer parser.</param>
            <param name="offerAttachmentParser">The offer attachment parser.</param>
            <param name="contextWrapper">The context wrapper.</param>
        </member>
        <member name="M:eContracting.Services.OfferService.AcceptOffer(eContracting.Models.OfferModel,eContracting.Models.OfferSubmitDataModel,eContracting.Models.UserCacheDataModel,System.String)">
            <inheritdoc/>
        </member>
        <member name="M:eContracting.Services.OfferService.CanReadOffer(System.String,eContracting.Models.UserCacheDataModel,eContracting.OFFER_TYPES)">
            <inheritdoc/>
        </member>
        <member name="M:eContracting.Services.OfferService.GetOffer(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:eContracting.Services.OfferService.GetOffer(System.String,eContracting.Models.UserCacheDataModel)">
            <inheritdoc/>
        </member>
        <member name="M:eContracting.Services.OfferService.GetOffer(System.String,eContracting.Models.UserCacheDataModel,System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:eContracting.Services.OfferService.ReadOffer(System.String,eContracting.Models.UserCacheDataModel)">
            <inheritdoc/>
        </member>
        <member name="M:eContracting.Services.OfferService.SignInOffer(System.String,eContracting.Models.UserCacheDataModel)">
            <inheritdoc/>
        </member>
        <member name="M:eContracting.Services.OfferService.CancelOffer(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:eContracting.Services.OfferService.GetAttachments(eContracting.Models.OfferModel,eContracting.Models.UserCacheDataModel)">
            <inheritdoc/>
        </member>
        <member name="M:eContracting.Services.OfferService.GetOffer(eContracting.Models.ResponseCacheGetModel,System.Boolean)">
            <summary>
            Gets the offer from given <paramref name="response"/>.
            </summary>
            <param name="response">The response.</param>
            <param name="includeTextParameters">if set to <c>true</c> [include text parameters].</param>
            <returns></returns>
        </member>
        <member name="M:eContracting.Services.OfferService.GetAttachments(eContracting.Models.OfferModel,eContracting.Models.OfferFileXmlModel[])">
            <summary>
            Gets offer attachments generated from <paramref name="files"/>.
            </summary>
            <param name="offer">The offer.</param>
            <param name="files">The files.</param>
            <returns>Array of attachments.</returns>
        </member>
        <member name="M:eContracting.Services.OfferService.GetTextParameters(eContracting.Models.OfferModel,eContracting.Models.ResponseCacheGetModel)">
            <summary>
            Gets the text parameters for specific version.
            </summary>
            <param name="offer">The offer.</param>
            <param name="response">The response.</param>
            <returns>Dictionary or null.</returns>
            <exception cref="T:System.ApplicationException">Cannot get text parameters. Unknown version {version}</exception>
        </member>
        <member name="M:eContracting.Services.OfferService.GetFilesForAccept(eContracting.Models.OfferModel,eContracting.Models.OfferSubmitDataModel,eContracting.Models.OfferFileXmlModel[],System.String)">
            <summary>
            Gets all files for accept.
            </summary>
            <param name="offer">The offer.</param>
            <param name="data">The data.</param>
            <param name="responsePdfFiles">The response PDF files.</param>
            <param name="sessionId">The session identifier.</param>
            <returns>Array of all accepted, signed and uploaded files in <paramref name="offer"/>.</returns>
            <exception cref="T:System.ApplicationException">
            Missing required file for sign: {template}
            or
            File not found in the cache: key: {uniqueKey}: template: {template}
            or
            File matching template ({template}) doesn't exist
            or
            File matching template ({template}) doesn't exist
            or
            Unknown upload group '{groupKey}'
            or
            Cannot find upload for '{groupKey}'
            or
            Group '{uploadGroup}' doesn't have content
            </exception>
        </member>
        <member name="M:eContracting.Services.OfferService.SetStatus(System.String,eContracting.OFFER_TYPES,System.String)">
            <summary>
            Sets the <paramref name="status"/> asynchronously.
            </summary>
            <param name="guid">The unique identifier.</param>
            <param name="type">The type.</param>
            <param name="status">The status.</param>
            <returns>Response from inner service.</returns>
        </member>
        <member name="M:eContracting.Services.OfferService.GetFiles(System.String,System.Boolean)">
            <summary>
            Gets the files asynchronous.
            </summary>
            <param name="guid">The unique identifier.</param>
            <param name="isAccepted">if set to <c>true</c> [is accepted].</param>
            <returns></returns>
        </member>
        <member name="T:eContracting.Services.DbUserFileCacheService">
            <summary>
            Database cache for user files.
            </summary>
            <seealso cref="T:eContracting.IUserFileCacheService" />
        </member>
        <member name="F:eContracting.Services.DbUserFileCacheService.ConnectionString">
            <summary>
            The connection string.
            </summary>
        </member>
        <member name="M:eContracting.Services.DbUserFileCacheService.#ctor(eContracting.ISettingsReaderService)">
            <summary>
            Initializes a new instance of the <see cref="T:eContracting.Services.DbUserFileCacheService"/> class.
            </summary>
            <param name="settingsReader">The settings reader.</param>
        </member>
        <member name="M:eContracting.Services.DbUserFileCacheService.Clear(eContracting.Models.DbSearchParameters)">
            <inheritdoc/>
        </member>
        <member name="M:eContracting.Services.DbUserFileCacheService.ClearAsync(eContracting.Models.DbSearchParameters)">
            <inheritdoc/>
        </member>
        <member name="M:eContracting.Services.DbUserFileCacheService.FindGroup(eContracting.Models.DbSearchParameters)">
            <inheritdoc/>
        </member>
        <member name="M:eContracting.Services.DbUserFileCacheService.FindGroups(eContracting.Models.DbSearchParameters)">
            <inheritdoc/>
        </member>
        <member name="M:eContracting.Services.DbUserFileCacheService.GetTotalOutputFileSize(eContracting.Models.DbSearchParameters)">
            <inheritdoc/>
        </member>
        <member name="M:eContracting.Services.DbUserFileCacheService.FindSignedFile(eContracting.Models.DbSearchParameters)">
            <inheritdoc/>
        </member>
        <member name="M:eContracting.Services.DbUserFileCacheService.FindSignedFiles(eContracting.Models.DbSearchParameters)">
            <inheritdoc/>
        </member>
        <member name="M:eContracting.Services.DbUserFileCacheService.RemoveGroup(eContracting.Models.DbSearchParameters)">
            <inheritdoc/>
        </member>
        <member name="M:eContracting.Services.DbUserFileCacheService.RemoveSignedFile(eContracting.Models.DbSearchParameters)">
            <inheritdoc/>
        </member>
        <member name="M:eContracting.Services.DbUserFileCacheService.Set(eContracting.Models.DbUploadGroupFileModel)">
            <inheritdoc/>
        </member>
        <member name="M:eContracting.Services.DbUserFileCacheService.Set(eContracting.Models.DbSignedFileModel)">
            <inheritdoc/>
        </member>
        <member name="M:eContracting.Services.DbUserFileCacheService.SaveAsync(eContracting.Storage.DatabaseContext,eContracting.Storage.File,System.Collections.Generic.IEnumerable{eContracting.Storage.FileAttribute})">
            <summary>
            Save <paramref name="file"/> with its <paramref name="attributes"/> in transaction.
            </summary>
            <param name="context">The context.</param>
            <param name="file">The file.</param>
            <param name="attributes">The attributes.</param>
        </member>
        <member name="T:eContracting.Services.SessionProvider">
            <inheritdoc/>
        </member>
        <member name="M:eContracting.Services.SessionProvider.GetId">
            <inheritdoc/>
        </member>
        <member name="M:eContracting.Services.SessionProvider.GetValue``1(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:eContracting.Services.SessionProvider.Set``1(System.String,``0,System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:eContracting.Services.SessionProvider.Remove(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:eContracting.Services.SessionProvider.SetTimeout(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:eContracting.Services.SessionProvider.Abandon">
            <inheritdoc/>
        </member>
        <member name="M:eContracting.Services.SessionProvider.RefreshSession">
            <inheritdoc/>
        </member>
        <member name="M:eContracting.Services.SitecoreTextService.ErrorCode(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:eContracting.Services.SitecoreTextService.FindByKey(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:eContracting.Services.SitecoreTextService.FindByKey(System.String,System.Collections.Generic.IDictionary{System.String,System.String})">
            <inheritdoc/>
        </member>
        <member name="T:eContracting.Services.SessionDataCacheService">
            <inheritdoc/>
        </member>
        <member name="F:eContracting.Services.SessionDataCacheService.SessionProvider">
            <summary>
            The session provider.
            </summary>
        </member>
        <member name="M:eContracting.Services.SessionDataCacheService.#ctor(eContracting.ISessionProvider)">
            <summary>
            Initializes a new instance of the <see cref="T:eContracting.Services.SessionDataCacheService"/> class.
            </summary>
        </member>
        <member name="M:eContracting.Services.SessionDataCacheService.Set``1(System.String,``0)">
            <inheritdoc/>
        </member>
        <member name="M:eContracting.Services.SessionDataCacheService.Get``1(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:eContracting.Services.SessionDataCacheService.Remove(System.String)">
            <inheritdoc/>
        </member>
        <member name="T:eContracting.Services.OfferAttachmentParserService">
            <inheritdoc/>
            <seealso cref="T:eContracting.IOfferAttachmentParserService" />
        </member>
        <member name="F:eContracting.Services.OfferAttachmentParserService.Logger">
            <summary>
            The logger.
            </summary>
        </member>
        <member name="M:eContracting.Services.OfferAttachmentParserService.#ctor(eContracting.ILogger)">
            <summary>
            Initializes a new instance of the <see cref="T:eContracting.Services.OfferAttachmentParserService"/> class.
            </summary>
            <param name="logger">The logger.</param>
            <exception cref="T:System.ArgumentNullException">logger</exception>
        </member>
        <member name="M:eContracting.Services.OfferAttachmentParserService.Parse(eContracting.Models.OfferModel,eContracting.Models.OfferFileXmlModel[])">
            <inheritdoc/>
        </member>
        <member name="M:eContracting.Services.OfferAttachmentParserService.Equals(eContracting.Models.OfferAttachmentXmlModel,eContracting.Models.OfferFileXmlModel)">
            <inheritdoc/>
        </member>
        <member name="M:eContracting.Services.OfferAttachmentParserService.GetFileByTemplate(eContracting.Models.OfferModel,eContracting.Models.OfferAttachmentXmlModel,eContracting.Models.OfferFileXmlModel[])">
            <inheritdoc/>
        </member>
        <member name="M:eContracting.Services.OfferAttachmentParserService.MakeCompatible(eContracting.Models.OfferModel,eContracting.Models.OfferFileXmlModel[])">
            <inheritdoc/>
        </member>
        <member name="M:eContracting.Services.OfferAttachmentParserService.ExcludeDocumentsForAcceptedOffer(eContracting.Models.OfferModel,eContracting.Models.OfferFileXmlModel[])">
            <summary>
            Excludes <see cref="T:eContracting.Models.OfferAttachmentXmlModel"/> from <see cref="P:eContracting.Models.OfferModel.Documents"/> for accepted offer when real <see cref="T:eContracting.Models.OfferFileXmlModel"/> doesn't exist.
            </summary>
            <remarks>Accepted offer contains only accepted and signed files.</remarks>
            <param name="offer">The offer.</param>
            <param name="files">The files.</param>
        </member>
        <member name="M:eContracting.Services.OfferAttachmentParserService.GetIdAttach(eContracting.Services.ZCCH_ST_FILE)">
            <summary>
            Gets IDATTACH value from given <paramref name="file"/>.
            </summary>
            <param name="file">The file.</param>
            <returns></returns>
        </member>
        <member name="M:eContracting.Services.OfferAttachmentParserService.GetFileName(eContracting.Services.ZCCH_ST_FILE)">
            <summary>
            Gets readable file name.
            </summary>
            <param name="file">The file.</param>
            <returns>File name to display.</returns>
        </member>
        <member name="M:eContracting.Services.OfferAttachmentParserService.GetAttributes(eContracting.Models.OfferFileXmlModel)">
            <summary>
            Gets converted attributes from <see cref="P:eContracting.Services.ZCCH_ST_FILE.ATTRIB"/> to collection of <see cref="T:eContracting.Models.OfferAttributeModel"/>.
            </summary>
            <param name="file">The file.</param>
            <returns></returns>
        </member>
        <member name="M:eContracting.Services.OfferAttachmentParserService.Check(eContracting.Models.OfferModel,eContracting.Models.OfferFileXmlModel[])">
            <summary>
            Checks offer templates and files if they are ready and nothing is wrong.
            </summary>
            <param name="offer">The offer.</param>
            <param name="files">The files.</param>
            <exception cref="T:eContracting.EcontractingDataException">
            new ErrorModel("OAPS-MAT", $"Missing {Constants.FileAttributes.TYPE} in attachment collection (filename: {attachment.Description})")
            or
            new ErrorModel("OAPS-CHECK", $"Attachment {attachment.IdAttach} ({attachment.Description}) not found in files")
            or
            new ErrorModel("OAPS-EXF", $"File {file.FILENAME} doesn't exist in attachments (IDATTACH = {idattach})")
            </exception>
            <exception cref="T:eContracting.Models.ErrorModel">
            OAPS-MAT - Missing {Constants.FileAttributes.TYPE} in attachment collection (filename: {attachment.Description})
            or
            OAPS-CHECK - Attachment {attachment.IdAttach} ({attachment.Description}) not found in files
            or
            OAPS-EXF - File {file.FILENAME} doesn't exist in attachments (IDATTACH = {idattach})
            </exception>
            <exception cref="T:System.AggregateException">Check of offer templates and offer files failed</exception>
        </member>
        <member name="M:eContracting.Services.OfferAttachmentParserService.GetModel(eContracting.Models.OfferModel,eContracting.Models.OfferAttachmentXmlModel,eContracting.Models.OfferFileXmlModel[])">
            <summary>
            Gets <see cref="T:eContracting.Models.OfferAttachmentModel"/> created from a <paramref name="template"/>.
            </summary>
            <param name="offer">The offer.</param>
            <param name="template">The template.</param>
            <param name="files">The files.</param>
            <returns>Attachment model or null when matching file not found.</returns>
        </member>
        <member name="T:eContracting.Services.OfferParserService">
            <inheritdoc/>
        </member>
        <member name="F:eContracting.Services.OfferParserService.Logger">
            <summary>
            The logger.
            </summary>
        </member>
        <member name="F:eContracting.Services.OfferParserService.SettingsReader">
            <summary>
            The settings reader.
            </summary>
        </member>
        <member name="M:eContracting.Services.OfferParserService.#ctor(eContracting.ISettingsReaderService,eContracting.ILogger)">
            <summary>
            Initializes a new instance of the <see cref="T:eContracting.Services.OfferParserService"/> class.
            </summary>
            <param name="settingsReader">The settings reader.</param>
            <param name="logger">The logger.</param>
            <exception cref="T:System.ArgumentNullException">
            settingsReader
            or
            logger
            </exception>
        </member>
        <member name="M:eContracting.Services.OfferParserService.GenerateOffer(eContracting.Models.ResponseCacheGetModel)">
            <inheritdoc/>
        </member>
        <member name="M:eContracting.Services.OfferParserService.GetVersion(eContracting.Services.ZCCH_CACHE_GETResponse)">
            <inheritdoc/>
        </member>
        <member name="M:eContracting.Services.OfferParserService.GetTextParameters(eContracting.Models.OfferFileXmlModel[])">
            <inheritdoc/>
        </member>
        <member name="M:eContracting.Services.OfferParserService.MakeCompatibleParameters(System.Collections.Generic.IDictionary{System.String,System.String},System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:eContracting.Services.OfferParserService.GetHeader(eContracting.Services.ZCCH_CACHE_GETResponse)">
            <summary>
            Gets the header from <see cref="P:eContracting.Services.ZCCH_CACHE_GETResponse.ES_HEADER"/>.
            </summary>
            <param name="response">The response.</param>
        </member>
        <member name="M:eContracting.Services.OfferParserService.GetAttributes(eContracting.Services.ZCCH_CACHE_GETResponse)">
            <summary>
            Gets the attributes from <see cref="P:eContracting.Services.ZCCH_CACHE_GETResponse.ET_ATTRIB"/>.
            </summary>
            <param name="response">The response.</param>
            <returns>Array of attributes.</returns>
        </member>
        <member name="M:eContracting.Services.OfferParserService.ProcessResponse(eContracting.Models.ResponseCacheGetModel)">
            <summary>
            Processes the response and create <see cref="T:eContracting.Models.OfferModel"/> or root XML exists.
            </summary>
            <param name="response">The response.</param>
            <returns>Model or null.</returns>
        </member>
        <member name="M:eContracting.Services.OfferParserService.GetCoreFile(eContracting.Services.ZCCH_CACHE_GETResponse,System.Int32)">
            <summary>
            Gets the core file of the offer.
            </summary>
            <param name="response">The response.</param>
            <param name="version">The offer version.</param>
            <returns>The file.</returns>
            <exception cref="T:System.NotSupportedException">Unknow offer version ({version})</exception>
        </member>
        <member name="M:eContracting.Services.OfferParserService.ProcessRootFile(eContracting.Models.OfferFileXmlModel,System.Int32)">
            <summary>
            Processes the root file.
            </summary>
            <param name="file">The file.</param>
            <param name="version">Offer version.</param>
            <returns>Tuple with model and raw XML content.</returns>
        </member>
        <member name="M:eContracting.Services.OfferParserService.IsAccepted(eContracting.Services.ZCCH_CACHE_GETResponse)">
            <summary>
            Determines whether an offer from <paramref name="response"/> is accepted.
            </summary>
            <param name="response">The response.</param>
        </member>
        <member name="M:eContracting.Services.OfferParserService.IsExpired(eContracting.Services.ZCCH_CACHE_GETResponse,eContracting.Models.OfferHeaderModel,System.DateTime)">
            <summary>
            Determines whether an offer from <paramref name="response"/> is expired.
            </summary>
            <param name="response">The response.</param>
            <param name="headerModel">The header model.</param>
            <param name="expirationDate">The expiration date.</param>
        </member>
        <member name="M:eContracting.Services.OfferParserService.GetExpirationDate(eContracting.Services.ZCCH_CACHE_GETResponse,eContracting.Models.OfferXmlModel)">
            <summary>
            Gets expiration date from <paramref name="response"/> or from <paramref name="offerXmlModel"/>.
            </summary>
            <param name="response"></param>
            <param name="offerXmlModel"></param>
            <returns>If date not found, returns '<c>DateTime.Now.AddDays(-1)</c>' as default.</returns>
        </member>
        <member name="M:eContracting.Services.OfferParserService.MakeCompatible(eContracting.Models.OfferXmlModel,System.Int32)">
            <summary>
            Set missing required values in <paramref name="offerXml"/>.
            </summary>
            <remarks>
            <para>When missing bus process value, set default '<see cref="F:eContracting.Constants.OfferDefaults.BUS_PROCESS"/>'.</para>
            <para>When missing bus process type, first checks if campaign is empty, if yes, set '<see cref="F:eContracting.Constants.OfferDefaults.BUS_PROCESS_TYPE_A"/>', otherwise set '<see cref="F:eContracting.Constants.OfferDefaults.BUS_PROCESS_TYPE_B"/>'.</para>
            </remarks>
            <param name="offerXml">The offer XML.</param>
            <param name="version">Offer version.</param>
        </member>
        <member name="M:eContracting.Services.OfferParserService.AddCustomUploadModelWhenNecessary(eContracting.Models.OfferXmlModel)">
            <summary>
            Adds the custom upload model when any other upload is required.
            </summary>
            <param name="offerXml">The offer XML.</param>
        </member>
        <member name="M:eContracting.Services.OfferParserService.GetNodeValue(System.Xml.XmlNode)">
            <summary>
            Gets InnerXml from <paramref name="xmlNode"/>. If <paramref name="xmlNode"/> contains "&lt;body&gt;", it returns inner XML of it.
            </summary>
            <remarks>Some nodes can contains inner XML with '&lt;body xmlns="http://www.w3.org/1999/xhtml"&gt;'.</remarks>
            <param name="xmlNode">The XML node.</param>
            <returns>Inner xml value of <paramref name="xmlNode"/>.</returns>
        </member>
        <member name="M:eContracting.Services.OfferParserService.GetCleanedUpBodyValue(System.Xml.XmlNode)">
            <summary>
            Gets <paramref name="xmlNode"/> value with extra, non wanted, data.
            </summary>
            <param name="xmlNode">The XML node.</param>
        </member>
        <member name="M:eContracting.Services.OfferParserService.GetXmlNodeValue(System.Xml.XmlNode)">
            <summary>
            Gets <see cref="P:System.Xml.XmlNode.InnerText"/> or <see cref="P:System.Xml.XmlNode.InnerXml"/> based on 'this.SettingsReader.GetXmlNodeNamesExcludeHtml()'.
            </summary>
            <param name="xmlNode">The XML node.</param>
            <returns>Inner text or inner xml.</returns>
        </member>
        <member name="M:eContracting.Services.OfferParserService.GetCustomUploadModel">
            <summary>
            Creates model for custom, not mandatory, upload.
            </summary>
            <returns>The template model.</returns>
        </member>
        <member name="F:eContracting.Services.SitecoreSettingsReaderService.SitecoreService">
            <summary>
            The context.
            </summary>
        </member>
        <member name="F:eContracting.Services.SitecoreSettingsReaderService.ContextWrapper">
            <summary>
            The context wrapper.
            </summary>
        </member>
        <member name="F:eContracting.Services.SitecoreSettingsReaderService.Logger">
            <summary>
            The logger.
            </summary>
        </member>
        <member name="F:eContracting.Services.SitecoreSettingsReaderService.Rand">
            <summary>
            The randomizer.
            </summary>
        </member>
        <member name="P:eContracting.Services.SitecoreSettingsReaderService.SaveFilesToDebugFolder">
            <inheritdoc/>
            <remarks>Default value is false.</remarks>
        </member>
        <member name="P:eContracting.Services.SitecoreSettingsReaderService.ShowDebugMessages">
            <inheritdoc/>
            <remarks>Default value is false.</remarks>
        </member>
        <member name="P:eContracting.Services.SitecoreSettingsReaderService.SessionTimeout">
            <inheritdoc/>
            <remarks>Default value is 30 minutes.</remarks>
        </member>
        <member name="P:eContracting.Services.SitecoreSettingsReaderService.CognitoMinSecondsToRefreshToken">
            <inheritdoc/>
            <remarks>Default value is 60 minutes.</remarks>
        </member>
        <member name="P:eContracting.Services.SitecoreSettingsReaderService.SubmitOfferDelay">
            <inheritdoc/>
            <remarks>Default value is 5 seconds.</remarks>
        </member>
        <member name="P:eContracting.Services.SitecoreSettingsReaderService.CancelOfferDelay">
            <inheritdoc/>
            <remarks>Default value is 5 seconds.</remarks>
        </member>
        <member name="P:eContracting.Services.SitecoreSettingsReaderService.CrmUtilitiesUmc">
            <inheritdoc/>
        </member>
        <member name="P:eContracting.Services.SitecoreSettingsReaderService.CrmAuthService">
            <inheritdoc/>
        </member>
        <member name="P:eContracting.Services.SitecoreSettingsReaderService.SapApiGatewayId">
            <inheritdoc/>
        </member>
        <member name="P:eContracting.Services.SitecoreSettingsReaderService.CrmCognitoUrl">
            <inheritdoc/>
        </member>
        <member name="P:eContracting.Services.SitecoreSettingsReaderService.CrmAnonymousUrl">
            <inheritdoc/>
        </member>
        <member name="P:eContracting.Services.SitecoreSettingsReaderService.CrmAnonymousUser">
            <inheritdoc/>
        </member>
        <member name="P:eContracting.Services.SitecoreSettingsReaderService.CrmAnonymousPassword">
            <inheritdoc/>
        </member>
        <member name="M:eContracting.Services.SitecoreSettingsReaderService.#ctor(Glass.Mapper.Sc.ISitecoreService,eContracting.IContextWrapper,eContracting.ILogger)">
            <summary>
            Initializes a new instance of the <see cref="T:eContracting.Services.SitecoreSettingsReaderService"/> class.
            </summary>
        </member>
        <member name="M:eContracting.Services.SitecoreSettingsReaderService.GetAllLoginTypes">
            <inheritdoc/>
        </member>
        <member name="M:eContracting.Services.SitecoreSettingsReaderService.GetAllProcesses">
            <inheritdoc/>
        </member>
        <member name="M:eContracting.Services.SitecoreSettingsReaderService.GetAllProcessTypes">
            <inheritdoc/>
        </member>
        <member name="M:eContracting.Services.SitecoreSettingsReaderService.GetApiServiceOptions">
            <inheritdoc/>
        </member>
        <member name="M:eContracting.Services.SitecoreSettingsReaderService.GetSignApiServiceOptions">
            <inheritdoc/>
        </member>
        <member name="M:eContracting.Services.SitecoreSettingsReaderService.GetDefinitionDefault">
            <inheritdoc/>
        </member>
        <member name="M:eContracting.Services.SitecoreSettingsReaderService.GetDefinition(eContracting.Models.OfferModel)">
            <inheritdoc/>
        </member>
        <member name="M:eContracting.Services.SitecoreSettingsReaderService.GetDefinition(eContracting.Models.OffersContainerModel)">
            <inheritdoc/>
        </member>
        <member name="M:eContracting.Services.SitecoreSettingsReaderService.GetDefinition(System.String,System.String)">
            <inheritdoc/>
        </member>
        <member name="M:eContracting.Services.SitecoreSettingsReaderService.GetAllDefinitions">
            <inheritdoc/>
        </member>
        <member name="M:eContracting.Services.SitecoreSettingsReaderService.GetProductInfo(eContracting.Models.OfferAttachmentModel)">
            <inheritdoc/>
        </member>
        <member name="M:eContracting.Services.SitecoreSettingsReaderService.GetAllProductInfos">
            <inheritdoc/>
        </member>
        <member name="M:eContracting.Services.SitecoreSettingsReaderService.GetLoginTypes(eContracting.Models.OfferModel)">
            <inheritdoc/>
        </member>
        <member name="M:eContracting.Services.SitecoreSettingsReaderService.GetMainTextForLogin(eContracting.Models.OfferModel)">
            <inheritdoc/>
        </member>
        <member name="M:eContracting.Services.SitecoreSettingsReaderService.GetPageLink(eContracting.PAGE_LINK_TYPES)">
            <inheritdoc/>
        </member>
        <member name="M:eContracting.Services.SitecoreSettingsReaderService.GetSiteSettings">
            <inheritdoc/>
        </member>
        <member name="M:eContracting.Services.SitecoreSettingsReaderService.GetXmlNodeNamesExcludeHtml">
            <inheritdoc/>
        </member>
        <member name="M:eContracting.Services.SitecoreSettingsReaderService.GetSteps(eContracting.Models.IStepModel)">
            <inheritdoc/>
        </member>
        <member name="M:eContracting.Services.SitecoreSettingsReaderService.GetCustomDatabaseConnectionString">
            <inheritdoc/>
        </member>
        <member name="M:eContracting.Services.SitecoreSettingsReaderService.GetBackCompatibleTextParametersKeys(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:eContracting.Services.SitecoreSettingsReaderService.GetCognitoSettings">
            <inheritdoc/>
        </member>
    </members>
</doc>
